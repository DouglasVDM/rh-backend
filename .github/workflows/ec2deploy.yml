name: Build and Push Docker Image to DockerHub and Deploy to AWS

on:
  push:
    branches: ["dev", "main"]
  pull_request:
    branches: ["dev", "main"]

env:
  # The registry to push the Docker image. docker.io for Docker Hub.
  REGISTRY: docker.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  AWS_PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build the Docker image
        run: docker-compose build --no-cache --force-rm 

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Test the Docker image
        run: docker-compose up -d 
        
  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: "{{defaultContext}}"
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # deploy:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ env.DOCKER_USERNAME }}
  #         password: ${{ env.DOCKER_PASSWORD }}
  #     - name: Set permissions for private key
  #       run: |
  #         echo "${{ env.AWS_PRIVATE_KEY }}" > key.pem
  #         chmod 600 key.pem
  #     - name: Pull Docker image
  #       run: |
  #         ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_PUBLIC_DNS }} 'sudo docker pull douglasvdmerwe/rh-backend:latest'
  #     - name: Stop running container
  #       run: |
  #         ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_PUBLIC_DNS }} 'sudo docker stop rh-backend || true'
  #         ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_PUBLIC_DNS }} 'sudo docker rm rh-backend || true'
  #     - name: Run new container
  #       run: |
  #         ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_PUBLIC_DNS }} 'sudo docker run -d --name rh-backend -p 80:5000 douglasvdmerwe/rh-backend:latest'
